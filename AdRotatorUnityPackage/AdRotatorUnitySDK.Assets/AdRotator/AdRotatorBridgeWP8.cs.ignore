// Version 2.0.0.0

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Windows.Foundation;
using Windows.Foundation.Collections;
using UnityEngine;
using System.Windows.Controls;

namespace AdRotatorUnitySDK.Integration
{
	public delegate void ExecuteHandler(NoParameterExecuteHandler toExecute);

	public delegate void NoParameterExecuteHandler();
	
	/// <summary>
	/// Unity to Windows 8 bridge initializer.
	/// </summary>
	public static class AdRotatorBridge
	{
		/// <summary>
		/// Name of the AdRotator control added to the swap panel.
		/// </summary>
		private const string AdRotatorManagementIdentifier = "AdRotatorManagement";

		/// <summary>
		/// Static holder for additional required platform WinRT components
		/// </summary>
		public static Dictionary<AdRotator.Model.AdType, Type> PlatformAdProviderComponents = new Dictionary<AdRotator.Model.AdType,Type>();

		/// <summary>
		/// Initial setup of the Unity to Windows 8 bridge.
		/// </summary>
		/// <param name="unityPage">Page where the Unity scene will be showing.</param>
		/// <param name="uiThread">Delegate used to forward execution to the UI Thread. Bridge with Unity APIs.</param>
		public static void Register(Page unityPage, ExecuteHandler uiThread)
		{
			GameObject go = GameObject.Find(AdRotatorManagementIdentifier);
			if (go != null)
			{
				var mgt = go.GetComponent<AdRotatorUnitySDK.Assets.Plugins.AdRotatorManagement>();
				if (mgt != null)
				{
					// Initial load of the rotator with initial settings.
					UpdateAd(mgt.AdSettings, mgt.AppSettings, unityPage, uiThread);

					// Register callback from Unity to receive calls.
					mgt.OnSettingsUpdated = (ad, app) => UpdateAd(ad, app, unityPage, uiThread);
				}
				else
				{
					Debug.LogError("AdRotatorManagement behaviour not attached to the AdRotatorManagement game object.");
				}
			}
			else
			{
				Debug.LogError("AdRotatorManagement game object not found, make sure it is added in the first scene loaded in the game.");
			}
		}
		
		/// <summary>
		/// Update the Ad settings on the AdRotator.
		/// This will trigger the creation a new AdRotator to make sure state is well known.
		/// </summary>
		/// <param name="ad">Unity provided AdSettings.</param>
		/// <param name="app">Unity provided AppSettings.</param>
		/// <param name="page">Page where the Unity scene is showing.</param>
		/// <param name="uiThread">Delegate used to forward execution to the UI Thread. Bridge with Unity APIs.</param>
		private static void UpdateAd(AdRotatorUnitySDK.Assets.Plugins.AdSettings ad, AdRotatorUnitySDK.Assets.Plugins.AppSettings app, Page page, ExecuteHandler uiThread)
		{
			var position = ad.Position;
			var size = ad.Size;
			var isEnabled = ad.IsEnabled;
			var slidingDisplay = ad.SlidingAdDisplaySeconds;
			var slidingHidden = ad.SlidingAdHiddenSeconds;
			System.Windows.VerticalAlignment verticalAlign;
			System.Windows.HorizontalAlignment horizontalAlign;
			int adWidth;
			int adHeight;

			var slidingDirection = GetSlidingAdDirection(ad.SlidingAdDirection);
			GetAdPosition(position, out verticalAlign, out horizontalAlign);
			GetAdSize(size, out adWidth, out adHeight);			

			// Initialize the AdRotator on the UI thread only.
			uiThread(() =>
			{
				var panel = page.Content as DrawingSurfaceBackgroundGrid;
				CleanUpExistingRotator(panel);

				if (isEnabled)
				{
					// Add new rotator only if it is enabled, otherwise remove control to safe resources.
					var rotator = InitNewRotator(panel, app, verticalAlign, horizontalAlign, adWidth, adHeight, isEnabled, slidingDisplay, slidingHidden, slidingDirection);
					
					// Set parameters only once rotator is Loaded, otherwise some internal init is missing.
					rotator.AdRotatorReady += () =>
					{
						ActivateRotator(rotator);
					};
				}
			});
		}

		/// <summary>
		/// Remove existing AdRotator, if found.
		/// </summary>
		/// <param name="panel">Panel where to search for the existing rotator.</param>
		private static void CleanUpExistingRotator(DrawingSurfaceBackgroundGrid panel)
		{
			var rotator = panel.FindName(AdRotatorManagementIdentifier) as AdRotator.AdRotatorControl;

			if (rotator != null)
			{
				AdRotator.AdRotatorControl.Log -= Log;
				rotator.IsAdRotatorEnabled = false;
				rotator.Dispose();
				panel.Children.Remove(rotator);
			}
		}

		/// <summary>
		/// Create a new AdRotator and add it to swap panel, ready for configuration.
		/// </summary>
		/// <param name="panel">Panel where to add the newly created rotator.</param>
		/// <param name="appSettings">Ad Provider configuration.</param>
		/// <param name="verticalAlign">Converted Ad Position (vertical).</param>
		/// <param name="horizontalAlign">Converted Ad Position (horizontal).</param>
		/// <param name="adWidth">Ad Width.</param>
		/// <param name="adHeight">Ad Height.</param>
		/// <param name="isEnabled">Status of the rotator.</param>
		/// <param name="slidingDisplay">Sliding Ad display time in seconds.</param>
		/// <param name="slidingHidden">Sliding Ad hidden time in seconds.</param>
		/// <param name="slidingDirection">Sliding Ad Direction.</param>
		/// <returns>Newly created AdRotator.</returns>
		private static AdRotator.AdRotatorControl InitNewRotator(DrawingSurfaceBackgroundGrid panel, AdRotatorUnitySDK.Assets.Plugins.AppSettings appSettings, System.Windows.VerticalAlignment verticalAlign, System.Windows.HorizontalAlignment horizontalAlign, int adWidth, int adHeight, bool isEnabled, int slidingDisplay, int slidingHidden, AdRotator.Model.AdSlideDirection slidingDirection)
		{
			AdRotator.AdRotatorControl rotator;
			rotator = new AdRotator.AdRotatorControl();
			rotator.Name = AdRotatorManagementIdentifier;
			rotator.AdWidth = adWidth;
			rotator.AdHeight = adHeight;
			rotator.AdRetrievalMode = (AdRotator.Model.AdMode)Enum.Parse(typeof(AdRotator.Model.AdMode),appSettings.AdMode.ToString());

			foreach (var providerWinRTComponent in PlatformAdProviderComponents)
			{
				rotator.PlatformAdProviderComponents.Add(providerWinRTComponent.Key, providerWinRTComponent.Value);
			}

			rotator.RemoteSettingsLocation = appSettings.SettingsUrl;
			rotator.LocalSettingsLocation = "defaultAdSettings.xml";

			rotator.VerticalAlignment = verticalAlign;
			rotator.HorizontalAlignment = horizontalAlign;
			rotator.SlidingAdDisplaySeconds = slidingDisplay;
			rotator.SlidingAdHiddenSeconds = slidingHidden;
			rotator.SlidingAdDirection = slidingDirection;
			rotator.IsAdRotatorEnabled = isEnabled;
			panel.Children.Add(rotator);
			AdRotator.AdRotatorControl.Log += Log;
			return rotator;
		}

		/// <summary>
		/// Initialize the control with the provided settings.
		/// </summary>
		/// <param name="rotator">AdRotator to configure.</param>
		private static void ActivateRotator(AdRotator.AdRotatorControl rotator)
		{
			rotator.Invalidate(null);
		}

		/// <summary>
		/// Forward to Unity logger.
		/// Each message will be prefixed with "AdRotator:".
		/// </summary>
		/// <param name="msg">Message to log.</param>
		private static void Log(string msg)
		{
			Debug.Log("AdRotator: " + msg);
		}

		/// <summary>
		/// Convert Unity domain AdSize to XAML control dimensions.
		/// </summary>
		/// <param name="size">Unity domain AdSize.</param>
		/// <param name="adWidth">Ad Width.</param>
		/// <param name="adHeight">Ad Height.</param>
		private static void GetAdSize(Assets.Plugins.AdSize size, out int adWidth, out int adHeight)
		{
			adWidth = 728;
			adHeight = 90;

			switch (size)
			{
				case AdRotatorUnitySDK.Assets.Plugins.AdSize.MediumRectangle300x250:
					adWidth = 300;
					adHeight = 250;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdSize.Leaderboard728x90:
					adWidth = 728;
					adHeight = 90;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdSize.WideSkyscraper160x600:
					adWidth = 160;
					adHeight = 600;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdSize.SquarePopUp250x250:
					adWidth = 250;
					adHeight = 250;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdSize.SplitViewBanner500x130:
					adWidth = 500;
					adHeight = 130;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdSize.SnapViewBanner292x60:
					adWidth = 292;
					adHeight = 60;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdSize.HalfTile250x125:
					adWidth = 250;
					adHeight = 125;
					break;
			}
		}

		/// <summary>
		/// Convert Unity domain AdPosition to XAML position alignments.
		/// </summary>
		/// <param name="horizontalAlign">XAML HorizontalAlignment.</param>
		/// <param name="verticalAlign">XAML VerticalAlignment.</param>
		/// <param name="position">Unity domain AdPosition.</param>
		private static void GetAdPosition(Assets.Plugins.AdPosition position, out System.Windows.VerticalAlignment verticalAlign, out System.Windows.HorizontalAlignment horizontalAlign)
		{
			verticalAlign = System.Windows.VerticalAlignment.Top;
			horizontalAlign = System.Windows.HorizontalAlignment.Center;
	
			switch (position)
			{
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.TopLeftCorner:
					verticalAlign = System.Windows.VerticalAlignment.Top;
					horizontalAlign = System.Windows.HorizontalAlignment.Left;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.TopRightCorner:
					verticalAlign = System.Windows.VerticalAlignment.Top;
					horizontalAlign = System.Windows.HorizontalAlignment.Right;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.BottomLeftCorner:
					verticalAlign = System.Windows.VerticalAlignment.Bottom;
					horizontalAlign = System.Windows.HorizontalAlignment.Left;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.BottomRightCorner:
					verticalAlign = System.Windows.VerticalAlignment.Bottom;
					horizontalAlign = System.Windows.HorizontalAlignment.Right;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.TopCenter:
					verticalAlign = System.Windows.VerticalAlignment.Top;
					horizontalAlign = System.Windows.HorizontalAlignment.Center;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.BottomCenter:
					verticalAlign = System.Windows.VerticalAlignment.Bottom;
					horizontalAlign = System.Windows.HorizontalAlignment.Center;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.LeftCenter:
					verticalAlign = System.Windows.VerticalAlignment.Center;
					horizontalAlign = System.Windows.HorizontalAlignment.Left;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.RightCenter:
					verticalAlign = System.Windows.VerticalAlignment.Center;
					horizontalAlign = System.Windows.HorizontalAlignment.Right;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.AdPosition.Center:
					verticalAlign = System.Windows.VerticalAlignment.Center;
					horizontalAlign = System.Windows.HorizontalAlignment.Center;
					break;
			}
		}

		/// <summary>
		/// Convert Unity domain SlidingAdDirection to AdRotator SlidingAdDirection.
		/// </summary>
		/// <param name="direction">Unity SlidingAdDirection.</param>
		/// <returns>AdRotator SlidingAdDirection.</returns>
		private static AdRotator.Model.AdSlideDirection GetSlidingAdDirection(AdRotatorUnitySDK.Assets.Plugins.SlidingAdDirection direction)
		{
			AdRotator.Model.AdSlideDirection slidingDirection = AdRotator.Model.AdSlideDirection.None;
			switch (direction)
			{
				case AdRotatorUnitySDK.Assets.Plugins.SlidingAdDirection.None:
					slidingDirection = AdRotator.Model.AdSlideDirection.None;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.SlidingAdDirection.Bottom:
					slidingDirection = AdRotator.Model.AdSlideDirection.Bottom;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.SlidingAdDirection.Left:
					slidingDirection = AdRotator.Model.AdSlideDirection.Left;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.SlidingAdDirection.Right:
					slidingDirection = AdRotator.Model.AdSlideDirection.Right;
					break;
				case AdRotatorUnitySDK.Assets.Plugins.SlidingAdDirection.Top:
					slidingDirection = AdRotator.Model.AdSlideDirection.Top;
					break;
			}
			return slidingDirection;
		}
	}
}
